package zoot.analyse ;

import java.util.*;
import zoot.arbre.* ;
import zoot.arbre.expressions.* ;
import zoot.arbre.instructions.* ;
import zoot.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non terminée") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    DEBUT, FIN, POINTVIRGULE, ECRIRE, VARIABLES ;
terminal String    CSTENTIERE, BOOLEEN, ENTIER, ID;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, VAR, LVAR ; //VAR à vérifier
non terminal Instruction INST ;
non terminal Expression EXP ;
non terminal String TYPE ;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=     DEBUT LINST:li  FIN
                {: RESULT = li ; :}
        |
                VARIABLES LVAR:lvar DEBUT LINST:li  FIN
                {: RESULT = li ; :}
                ;

LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
                ;
    
EXP    ::=     CSTENTIERE:c
                {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
        |
                ID:id
                {: RESULT = new Idf(id, idleft + 1) ; :}
                ;

/* A Vérifier avec le prochain CM*/

TYPE    ::=     BOOLEEN
                {: RESULT = "booleen" ; :}
        |
                ENTIER
                {: RESULT = "entier" ; :}
                ;

LVAR    ::=     LVAR:lvar VAR:var   //Inspiré de la règle LINST, à vérifer
                {: ((BlocDInstructions)lvar).ajouter(var) ;
                   RESULT = lvar ; :}
        |
                VAR:var
                {: BlocDInstructions b = new BlocDInstructions(varleft + 1) ;
                   b.ajouter(var) ;
                   RESULT = b ; :}
                ;

VAR     ::=     TYPE:t ID:id POINTVIRGULE
                {: TDS.getInstance().ajouter(id, new Symbole(t)) ; :}
                ;