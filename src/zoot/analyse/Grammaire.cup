package zoot.analyse ;

import java.util.*;
import zoot.arbre.* ;
import zoot.arbre.expressions.* ;
import zoot.arbre.expressions.binaire.*;
import zoot.arbre.instructions.* ;
import zoot.arbre.declarations.* ;
import zoot.exceptions.*;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non terminée") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    DEBUT, FIN, POINTVIRGULE, VIRGULE, ECRIRE, VARIABLES, EGALE, PARENTHESEOUVRANTE, PARENTHESEFERMANTE, FONCTIONS, RETOURNE, REPETER, JUSQUA, FINREPETER, SI, ALORS, FINSI, PLUS, FOIS, INFERIEUR, EGALITE, DIFFERENT, ET, OU;
terminal String    CSTENTIERE, CSTBOOLEENNE, BOOLEEN,ENTIER, ID;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, VAR, LVAR, FCT, LFCT, PARAM, LPARAM, PAR_APL, PARENTHESES  ;
non terminal Instruction INST ;
non terminal Expression EXP ;
non terminal String TYPE ;

precedence left OU;
precedence left ET;
precedence left DIFFERENT;
precedence left EGALITE;
precedence left INFERIEUR;
precedence left PLUS;
precedence left FOIS;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=     DEBUT LINST:li  FIN
                {: RESULT = li ; :}
        |
                VARIABLES LVAR:lvar DEBUT LINST:li  FIN
                {:RESULT = li ; :}
        |
                VARIABLES LVAR:lvar FONCTIONS LFCT:lf DEBUT LINST:li  FIN
                {: RESULT = li ; :}
                ;

LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
        |
                ID:id EGALE EXP:e POINTVIRGULE
                {: Idf i = new Idf( new EntreeVariable(id, idleft+1), idleft + 1) ;
                   RESULT = new Affectation(idleft+1, i, e) ; :}
        |
                RETOURNE EXP:e POINTVIRGULE
                {: RESULT = new Retourne(e, eleft+1); :}
        |
                REPETER LINST:li JUSQUA EXP:e FINREPETER
                {: :} //TODO: Classe Repeter
        |
                SI EXP:e ALORS LINST:li FINSI
                {: :} //TODO: Classe Si
                ;

EXP    ::=     CSTENTIERE:c
                {: RESULT = new ConstanteEntiere(c, cleft + 1) ;:}
        |
                ID:id
                {: RESULT = new Idf( new EntreeVariable(id, idleft+1), idleft + 1) ; :}
        |
                CSTBOOLEENNE:c
                {: RESULT = new ConstanteBooleenne(c, cleft + 1) ; :}
        |
                ID:id PARENTHESEOUVRANTE PARENTHESEFERMANTE
                {: RESULT = new AppelFonc(new EntreeFonction(id, 0, idleft+1), idleft + 1) ; :}
        |
                ID:id PARENTHESEOUVRANTE PAR_APL PARENTHESEFERMANTE
                {: RESULT = new AppelFonc(new EntreeFonction(id, 1, idleft+1), idleft + 1) ; :}
        |
                EXP:eg PLUS EXP:ed
                {: RESULT = new Add(eg, ed, egleft+1); :}
        |
                EXP:eg FOIS EXP:ed
                {: RESULT = new Mult(eg, ed, egleft+1); :}
        |
                EXP:eg INFERIEUR EXP:ed
                {:  :} //TODO: Classe Inf ?
        |
                EXP:eg EGALITE EXP:ed
                {:  :} //TODO: Classe Egal ?
        |
                EXP:eg DIFFERENT EXP:ed
                {:  :} //TODO: Classe Egal ?
        |
                EXP:eg ET EXP:ed
                {:  :} //TODO: Classe Et ?
        |
                EXP:eg OU EXP:ed
                {: :} //TODO: Classe Ou ?
                ;

TYPE    ::=     BOOLEEN
                {: RESULT = "booleen" ; :}
        |
                ENTIER
                {: RESULT = "entier" ; :}
                ;

LVAR    ::=     LVAR:lvar VAR:var
                {: ((BlocDInstructions)lvar).ajouter(var) ;
                   RESULT = lvar ; :}
        |
                VAR:var
                {: BlocDInstructions b = new BlocDInstructions(varleft + 1) ;
                   b.ajouter(var) ;
                   RESULT = b ; :}
                ;

VAR     ::=     TYPE:t ID:id POINTVIRGULE
                {: try {
                        TDS.getInstance().ajouter( new EntreeVariable(id, idleft+1), new Symbole(t, TDS.getInstance().getBlocActuel())) ;
                   } catch (DoubleDeclarationException e) {
                        CollectExcept.getInstance().addException(e);
                   }
                :}
                ;

LFCT    ::=     LFCT:lfct FCT:f
                {: ((BlocDInstructions)lfct).ajouter(f) ;
                   RESULT = lfct ; :}
        |
                FCT:f
                {: BlocDInstructions b = new BlocDInstructions(fleft + 1) ;
                   b.ajouter(f) ;
                   RESULT = b ; :}
                ;

FCT     ::=     TYPE:t ID:id PARENTHESES VARIABLES DEBUT LINST:li FIN //fonction sans paramètres
                {:
                    try {
                        TDS.getInstance().ajouter( new EntreeFonction(id, 0, idleft+1), new SymboleFct(t)) ;
                    } catch (DoubleDeclarationException e) {
                        CollectExcept.getInstance().addException(e) ;
                    }
                   LFCT.getInstance().addFonction(new Fonction(id, li, TDS.getInstance().getBlocActuel(), idleft+1)) ;
                   TDS.getInstance().sortieBloc(); :}
        |
                TYPE:t ID:id PARENTHESES VARIABLES LVAR:lvar DEBUT LINST:li FIN //fonction sans paramètres avec variables locales
                        {:
                            try {
                                TDS.getInstance().ajouter( new EntreeFonction(id, 0, idleft+1), new SymboleFct(t)) ;
                            } catch (DoubleDeclarationException e) {
                                CollectExcept.getInstance().addException(e) ;
                            }
                           LFCT.getInstance().addFonction(new Fonction(id, li, TDS.getInstance().getBlocActuel(), idleft+1)) ;
                           TDS.getInstance().sortieBloc(); :}

        |
                TYPE:t ID:id PARENTHESEOUVRANTE LPARAM:lp PARENTHESEFERMANTE VARIABLES DEBUT LINST:li FIN //fonction avec paramètres
                {: Fonction f = new Fonction(id, li, TDS.getInstance().getBlocActuel(), idleft+1) ;
                   LFCT.getInstance().addFonction(f) ;
                   try {
                       SymboleFct s = new SymboleFct(t) ;
                       s.setNbParams(f.getNbParams());
                       TDS.getInstance().ajouter( new EntreeFonction(id, 0, idleft+1),s);
                   } catch (DoubleDeclarationException e) {
                       CollectExcept.getInstance().addException(e) ;
                   }
                   TDS.getInstance().sortieBloc();
                :}
        |
                TYPE:t ID:id PARENTHESEOUVRANTE LPARAM:lp PARENTHESEFERMANTE VARIABLES LVAR:lvar DEBUT LINST:li FIN //fonction avec paramètres et variables locales
                {:  Fonction f = new Fonction(id, li, TDS.getInstance().getBlocActuel(), idleft+1) ;
                     LFCT.getInstance().addFonction(f) ;
                     try {
                         SymboleFct s = new SymboleFct(t) ;
                         s.setNbParams(f.getNbParams());
                         TDS.getInstance().ajouter( new EntreeFonction(id, 0, idleft+1),s);
                     } catch (DoubleDeclarationException e) {
                         CollectExcept.getInstance().addException(e) ;
                     }
                     TDS.getInstance().sortieBloc();
                   :}
                ;
LPARAM  ::=     LPARAM:lp PARAM:p  //liste paramètres d'une fonction
                {: ((BlocDInstructions)lp).ajouter(p) ;
                   RESULT = lp ; :}
        |
                PARAM:p
                {: BlocDInstructions b = new BlocDInstructions(pleft + 1) ;
                   b.ajouter(p) ;
                   RESULT = b ; :}
                ;

PARAM   ::=     TYPE:t ID:id POINTVIRGULE
                {:  TDS.getInstance().entreebloc();
                    Entree e = new EntreeVariable(id, idleft+1) ;
                    Symbole s = new Symbole(t, TDS.getInstance().getBlocActuel()) ;
                    try {
                        TDS.getInstance().ajouter(e, s) ;
                    } catch (DoubleDeclarationException ex) {
                        CollectExcept.getInstance().addException(ex) ;
                    }
                    LFCT.getInstance().stockerParams(e, s);

                 :}
                 ;

PAR_APL ::=     PAR_APL:pa VIRGULE EXP:e  //liste paramètres d'une fonction
                {: ((BlocDInstructions)pa).ajouter(e) ;
                    LFCT.getInstance().stockerParamsApl(e);
                   RESULT = pa ; :}
        |
                EXP:e
                {: BlocDInstructions b = new BlocDInstructions(eleft + 1) ;
                   b.ajouter(e) ;
                   LFCT.getInstance().stockerParamsApl(e);
                   RESULT = b ; :}
                ;

PARENTHESES ::= PARENTHESEOUVRANTE PARENTHESEFERMANTE
                {: TDS.getInstance().entreebloc(); //on entre dans le bloc de la fonction :}
                ;